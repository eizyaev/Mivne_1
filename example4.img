# Memory image example - comments are allowed in lines that start with # as first character!
# The memory image file is composed from segments of 2 types, defined by an "@" location/type line:
#  1. "I@<address>" : The following lines are instructions at given memory offset.
#     Each subsequent line (up to the next empty line or comment) is an instruction of format: <command> <dst>,<src1>,<src2>
#     Commands is one of: NOP, ADD, SUB, LOAD, STORE, BR, BREQ, BRNEQ
#     operands are $<num> for any general purpose register, or just a number (in decimal or hex.) for immediate (for src2 only)
#  2. "D@<address>" : The following lines are data values at given memory offset.
#     Each subsequent line (up to the next empty line or comment) is data value of a 32 bit (in decimal or hex.) data word, e.g., 0x12A556FF
# The instructions are:
# 	NOP
#	ADD $dst, $src1, $src2 		(dst <- src1 + src2)
#	SUB $dst, $src1, $src2 		(dst <- src1 - src2)
#	LOAD $dst, $src1, $src2 	(dst <- Mem[src1 + src2]  src2 may be an immediate)
#	STORE $dst, $src1, $src2 	(Mem[dst + src2] <- src1  src2 may be an immediate)
#	BR $dst 					(Unconditional relative branch to PC+dst register value)
#	BREQ $dst, $src1, $src2		(Branch to PC+dst if src1 == src2)
#	BRNEQ $dst, $src1, $src2	(Branch to PC+dst if src1 != src2)

#Implement vector sum
#while(true){
#	for(int i = 0; i < 4; i++)
#		res[i] = vec1[i] + vec2[i];
#}

#Program start at address 0, after reset
I@0x00000000
LOAD $16, $0, 0x3280
LOAD $13, $0, 0x3284
LOAD $17, $0, 0x3288
LOAD $18, $0, 0x328C
LOAD $19, $0, 0x3290
LOAD $14, $0, //instruction address of BNEQ target
LOAD $15, $0,  //instruction address of BR target
ADD $1, $0, $0
LOAD $4, $1, 0x32A0
LOAD $5, $1, 0x32B0
ADD $6, $5, $4
STORE $1, $6, 0x32C0
ADD $1, $1, $13
SUB $16, $16, $17
BRNEQ $18, $16, $0
BR $19

#Data for this program. Spilitted to 3 areas, each one of them includes 3 integers in contigoues space
D@0x00003280
3
4
1
-28
-32

D@0x000032A0
0xFFFFFFFF
0x04
0x0A

D@0x000032B0
0x0F
-15
0x10

#This is the address of the destination
D@0x000032C0
0x0
0x0
0x0